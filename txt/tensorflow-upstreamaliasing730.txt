<h1>Aliasing in XLA</h1>
<p>This document describes the aliasing API for XLA: when building an XLA program,
you can specify the desired aliasing between the input and output buffers.</p>
<h2>Defining aliasing at compile-time</h2>
<p>For example, consider a trivial HLO module which simply adds <code>1</code> to its input:</p>
<p>```
HloModule increment</p>
<p>ENTRY entry {
  %p = f32[] parameter(0)
  %c = f32[] constant(1)
  ROOT %out = f32[] add(%p, %c)
}
```</p>
<p>This module will allocate two 4-byte buffers: one for the input <code>%p</code>, and one
for the output <code>%out</code>.</p>
<p>However, it is often desirable to perform the update in-place (for example, if
in the frontend generating the expression the input variable is no longer alive
after the computation, as in the increment <code>p++</code>).</p>
<p>To perform such an update efficiently, you can specify the input aliasing:</p>
<p>```
HloModule increment, input_output_alias={ {}: 0 }</p>
<p>ENTRY entry {
  %p = f32[] parameter(0)
  %c = f32[] constant(1)
  ROOT %out = f32[] add(%p, %c)
}
```</p>
<p>The format specifies that the entire output (marked by <code>{}</code>) is aliased to the
input parameter <code>0</code>.</p>
<p>See the
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/client/xla_builder.h"><code>XlaBuilder::SetUpAlias</code></a>
API to specify the aliasing programmatically.</p>
<h2>Defining aliasing at run-time</h2>
<p>The aliasing defined in the previous step is specified during the <em>compilation</em>.
During the execution, you can choose whether actually to donate the buffer using
the
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/client/local_client.h"><code>LocalClient::RunAsync</code></a>
API.</p>
<p>Input buffers to the program are wrapped in
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/executable.h"><code>ExecutionInput</code></a>,
which in turn contain a tree of <code>MaybeOwningDeviceMemory</code>. If memory is
specified as <em>owning</em> (ownership of the buffer is passed to the XLA runtime),
the buffer is actually donated, and the update is executed in-place, as
requested by the compile-time aliasing API.</p>
<p>If, however, the buffer which is aliased at compile time is <em>not</em> donated at
runtime, <em>copy-protection</em> kicks in: an extra output buffer <code>O</code> is allocated,
and the contents of the input buffer <code>P</code> which was meant to be aliased are
copied into <code>O</code> (so effectively the program can execute as if the buffer <code>O</code> was
donated at runtime).</p>
<h2>Frontend interop</h2>
<h3>TF/XLA</h3>
<p>In clusters of TensorFlow program compiled with XLA, all resource variable
updates are aliased at compile time (the aliasing at runtime depends on whether
anything else holds a reference to the resource variable tensor).</p>