<h2>TFSA-2021-059: Memory corruption in <code>DrawBoundingBoxesV2</code></h2>
<h3>CVE Number</h3>
<p>CVE-2021-29571</p>
<h3>Impact</h3>
<p>The implementation of <code>tf.raw_ops.MaxPoolGradWithArgmax</code> can cause reads outside
of bounds of heap allocated data if attacker supplies specially crafted inputs:</p>
<p>```python
import tensorflow as tf</p>
<p>images = tf.fill([10, 96, 0, 1], 0.)
boxes = tf.fill([10, 53, 0], 0.)
colors = tf.fill([0, 1], 0.)</p>
<p>tf.raw_ops.DrawBoundingBoxesV2(images=images, boxes=boxes, colors=colors)
```</p>
<p>The
<a href="https://github.com/tensorflow/tensorflow/blob/31bd5026304677faa8a0b77602c6154171b9aec1/tensorflow/core/kernels/image/draw_bounding_box_op.cc#L116-L130">implementation</a>
assumes that the last element of <code>boxes</code> input is 4, as required by <a href="https://www.tensorflow.org/api_docs/python/tf/raw_ops/DrawBoundingBoxesV2">the
op</a>.
Since this is not checked attackers passing values less than 4 can write outside
of bounds of heap allocated objects and cause memory corruption:</p>
<p><code>cc
const auto tboxes = boxes.tensor&lt;T, 3&gt;();
for (int64 bb = 0; bb &lt; num_boxes; ++bb) {
  ...
  const int64 min_box_row = static_cast&lt;float&gt;(tboxes(b, bb, 0)) * (height - 1);
  const int64 max_box_row = static_cast&lt;float&gt;(tboxes(b, bb, 2)) * (height - 1);
  const int64 min_box_col = static_cast&lt;float&gt;(tboxes(b, bb, 1)) * (width - 1);
  const int64 max_box_col = static_cast&lt;float&gt;(tboxes(b, bb, 3)) * (width - 1);
  ...
}</code></p>
<p>If the last dimension in <code>boxes</code> is less than 4, accesses similar to <code>tboxes(b,
bb, 3)</code> will access data outside of bounds. Further during code execution there
are also writes to these indices.</p>
<h3>Patches</h3>
<p>We have patched the issue in GitHub commit
<a href="https://github.com/tensorflow/tensorflow/commit/79865b542f9ffdc9caeb255631f7c56f1d4b6517">79865b542f9ffdc9caeb255631f7c56f1d4b6517</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this
commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow
2.1.4, as these are also affected and still in supported range.</p>
<h3>For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security
guide</a> for
more information regarding the security model and how to contact us with issues
and questions.</p>
<h3>Attribution</h3>
<p>This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu
X-Team.</p>