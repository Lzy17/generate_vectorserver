<!-- markdownlint-disable first-line-h1 -->
<h3>Deprecations and Warnings</h3>
<h4>HIP Perl Scripts Deprecation</h4>
<p>The <code>hipcc</code> and <code>hipconfig</code> Perl scripts are deprecated. In a future release, compiled binaries will be available as <code>hipcc.bin</code> and <code>hipconfig.bin</code> as replacements for the Perl scripts.</p>
<blockquote>
<p><strong>Note</strong></p>
<p>There will be a transition period where the Perl scripts and compiled binaries are available  before the scripts are removed. There will be no functional difference between the Perl scripts and their compiled binary counterpart. No user action is required. Once these are available, users can optionally switch to <code>hipcc.bin</code> and <code>hipconfig.bin</code>. The <code>hipcc</code>/<code>hipconfig</code> soft link will be assimilated to point from <code>hipcc</code>/<code>hipconfig</code> to the respective compiled binaries as the default option.</p>
</blockquote>
<h5>Linux Filesystem Hierarchy Standard for ROCm</h5>
<p>ROCm packages have adopted the Linux foundation filesystem hierarchy standard in this release to ensure ROCm components follow open source conventions for Linux-based distributions. While moving to a new filesystem hierarchy, ROCm ensures backward compatibility with its 5.1 version or older filesystem hierarchy. See below for a detailed explanation of the new filesystem hierarchy and backward compatibility.</p>
<h5>New Filesystem Hierarchy</h5>
<p>The following is the new filesystem hierarchy:4</p>
<p>```text
/opt/rocm-<ver>
    | --bin
      | --All externally exposed Binaries
    | --libexec
        | --<component>
            | -- Component specific private non-ISA executables (architecture independent)
    | --include
        | -- <component>
            | --<header files>
    | --lib
        | --lib<soname>.so -&gt; lib<soname>.so.major -&gt; lib<soname>.so.major.minor.patch
            (public libraries linked with application)
        | --<component> (component specific private library, executable data)
        | --<cmake>
            | --components
                | --<component>.config.cmake
    | --share
        | --html/<component>/<em>.html
        | --info/<component>/</em>.[pdf, md, txt]
        | --man
        | --doc
            | --<component>
                | --<licenses>
        | --<component>
            | --<misc files> (arch independent non-executable)
            | --samples</p>
<p>```</p>
<blockquote>
<p><strong>Note</strong></p>
<p>ROCm will not support backward compatibility with the v5.1(old) file system hierarchy in its next major release.</p>
</blockquote>
<p>For more information, refer to <a href="https://refspecs.linuxfoundation.org/fhs.shtml">https://refspecs.linuxfoundation.org/fhs.shtml</a>.</p>
<h5>Backward Compatibility with Older Filesystems</h5>
<p>ROCm has moved header files and libraries to its new location as indicated in the above structure and included symbolic-link and wrapper header files in its old location for backward compatibility.</p>
<blockquote>
<p><strong>Note</strong></p>
<p>ROCm will continue supporting backward compatibility until the next major release.</p>
</blockquote>
<h5>Wrapper header files</h5>
<p>Wrapper header files are placed in the old location (<code>/opt/rocm-xxx/&lt;component&gt;/include</code>) with a warning message to include files from the new location (<code>/opt/rocm-xxx/include</code>) as shown in the example below:</p>
<p>```h
// Code snippet from hip_runtime.h</p>
<h1>pragma message “This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with hip”.</h1>
<h1>include "hip/hip_runtime.h"</h1>
<p>```</p>
<p>The wrapper header files’ backward compatibility deprecation is as follows:</p>
<ul>
<li><code>#pragma</code> message announcing deprecation -- ROCm v5.2 release</li>
<li><code>#pragma</code> message changed to <code>#warning</code> -- Future release</li>
<li><code>#warning</code> changed to <code>#error</code> -- Future release</li>
<li>Backward compatibility wrappers removed -- Future release</li>
</ul>
<h5>Library files</h5>
<p>Library files are available in the <code>/opt/rocm-xxx/lib</code> folder. For backward compatibility, the old library location (<code>/opt/rocm-xxx/&lt;component&gt;/lib</code>) has a soft link to the library at the new location.</p>
<p>Example:</p>
<p><code>log
$ ls -l /opt/rocm/hip/lib/
total 4
drwxr-xr-x 4 root root 4096 May 12 10:45 cmake
lrwxrwxrwx 1 root root   24 May 10 23:32 libamdhip64.so -&gt; ../../lib/libamdhip64.so</code></p>
<h5>CMake Config files</h5>
<p>All CMake configuration files are available in the <code>/opt/rocm-xxx/lib/cmake/&lt;component&gt;</code> folder. For backward compatibility, the old CMake locations (<code>/opt/rocm-xxx/&lt;component&gt;/lib/cmake</code>) consist of a soft link to the new CMake config.</p>
<p>Example:</p>
<p><code>log
$ ls -l /opt/rocm/hip/lib/cmake/hip/
total 0
lrwxrwxrwx 1 root root 42 May 10 23:32 hip-config.cmake -&gt; ../../../../lib/cmake/hip/hip-config.cmake</code></p>
<h3>Fixed Defects</h3>
<h4>Compiler Improvements</h4>
<p>In ROCm v5.4.3, improvements to the compiler address errors with the following signatures:</p>
<ul>
<li>"error: unhandled SGPR spill to memory"</li>
<li>"cannot scavenge register without an emergency spill slot!"</li>
<li>"error: ran out of registers during register allocation"</li>
</ul>
<h3>Known Issues</h3>
<h4>Compiler Option Error at Runtime</h4>
<p>Some users may encounter a “Cannot find Symbol” error at runtime when using -save-temps. While most -save-temps use cases work correctly, this error may appear occasionally.</p>
<p>This issue is under investigation, and the known workaround is not to use -save-temps when the error appears.</p>