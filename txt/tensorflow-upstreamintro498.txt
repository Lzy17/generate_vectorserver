<h1>AutoGraph reference</h1>
<p><a href="index.md">Index</a></p>
<h2>Introduction</h2>
<h3>Terminology</h3>
<p>Typically, AutoGraph operates by converting a function into a new function with
new semantics.</p>
<p>```
def f(...):
  ...</p>
<p>converted_f = tf.autograph.to_graph(f)
```</p>
<p>In TensorFlow 2, AutoGraph is used to convert functions before they are being
traced, when using the <code>tf.function</code> API. For example, the following code:</p>
<p>```
def f(...):
  ...</p>
<p>graph_f = tf.function(f)
```</p>
<p>is roughly equivalent to:</p>
<p><code>converted_f = tf.autograph.to_graph(f)
graph_f = tf.function(autograph=False)(converted_f)</code></p>
<p>For the remainder of this document:</p>
<ul>
<li><strong>converted functions</strong> are functions converted by AutoGraph</li>
<li><strong>graph functions</strong> are functions compiled with <code>tf.function</code></li>
</ul>
<p>Graph functions are usually also converted, unless specified otherwise.</p>
<h3>Safe behavior</h3>
<p>The semantics described below can be summarized as:</p>
<ol>
<li>code should either produce the same results as running it in Eager mode, or
   fail with error.</li>
<li>TF 1.* graph code should produce the same graph as running it directly in
   graph mode.</li>
</ol>
<h3>Python semantics</h3>
<p>In general, AutoGraph does not change the semantics of error-free Python.
In special circumstances, AutoGraph may also preserve the semantics of code that
raises error as well. Semantics are preserved in the sense of the
<a href="https://en.wikipedia.org/wiki/As-if_rule">as-if rule</a>.</p>
<p>More specifically, code that would not be legal TensorFlow Graph code may become
legal when converted.</p>
<p>For example, consider the following function and the corresponding converted
function:</p>
<p>```
def f(x):
  if x &gt; 0:
    return x
  return -x</p>
<p>converted_f = tf.autograph.to_graph(f)
```</p>
<p>If <code>f</code> executes without error, then the <code>converted_f</code> has identical results:</p>
<p>```</p>
<blockquote>
<blockquote>
<blockquote>
<p>f(3)                               # Runs without error
3
converted_f(3)                     # Identical result
3
```</p>
</blockquote>
</blockquote>
</blockquote>
<h3>TensorFlow Eager semantics</h3>
<p>If a function is called with <code>Tensor</code> arguments in Eager execution mode, it has
certain semantics that are different from the Graph execution semantics.</p>
<p>For example, the function below produces different results when executed in
Eager and Graph modes:</p>
<p>```
def f(x):
  if x &gt; 0:
    return x
  return -x</p>
<h1>Use tf.function to run code as a TensorFlow Graph.</h1>
<p>unconverted_graph_f = tf.function(f, autograph=False)
graph_f = tf.function(f, autograph=True)
```</p>
<p>```</p>
<blockquote>
<blockquote>
<blockquote>
<p>f(tf.constant(3))                      # Valid in Eager
<tf.Tensor ... numpy=3></p>
<p>unconverted_graph_f(tf.constant(3))    # Error - not legal Graph code
TypeError: Using a <code>tf.Tensor</code> ...
```</p>
</blockquote>
</blockquote>
</blockquote>
<p>AutoGraph transfers the Eager semantics to the graph function:</p>
<p>```</p>
<blockquote>
<blockquote>
<blockquote>
<p>graph_f(tf.constant(3))                # Valid in AutoGraph
<tf.Tensor ... numpy=3>
```</p>
</blockquote>
</blockquote>
</blockquote>
<h3>Subset of Eager</h3>
<p>AutoGraph currently supports only a subset of Eager. For example, list operation
semantics are not supported:</p>
<p>```
def f(n):
  l = []
  for i in tf.range(n):
    l.append(i)
  return l</p>
<p>converted_f = tf.autograph.to_graph(f)
```</p>
<p>```</p>
<blockquote>
<blockquote>
<blockquote>
<p>f(3)                               # Valid in Eager
[1, 2, 3]
converted_f(3)                     # Not valid in AutoGraph (by default)
&lt;<error>&gt;
```</p>
</blockquote>
</blockquote>
</blockquote>
<h3>Experimental features</h3>
<p>AutoGraph supports additional semantics which are not yet stable. This includes
for example support for list semantics applied to <code>TensorArray</code>:</p>
<p>```
def f(n):
  l = tf.TensorArray(dtype=tf.int32, size=0, dynamic_size=True)
  for i in tf.range(n):
    l.append(i)
  return l</p>
<p>converted_f = tf.autograph.to_graph(f)
experimental_converted_f = tf.autograph.to_graph(
    f, experimental_optional_features=tf.autograph.experimental.Feature.LISTS)
```</p>
<p>```</p>
<blockquote>
<blockquote>
<blockquote>
<p>converted_f(3)                     # Not valid in AutoGraph (by default)
&lt;<error>&gt;
experimental_converted_f(3)        # Valid
&lt;<TensorArray object>&gt;
```</p>
</blockquote>
</blockquote>
</blockquote>