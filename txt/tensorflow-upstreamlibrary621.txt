<h1>Understand the C++ library</h1>
<p>The TensorFlow Lite for Microcontrollers C++ library is part of the
<a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro">TensorFlow repository</a>.
It is designed to be readable, easy to modify, well-tested, easy to integrate,
and compatible with regular TensorFlow Lite.</p>
<p>The following document outlines the basic structure of the C++ library and
provides information about creating your own project.</p>
<h2>File structure</h2>
<p>The
<a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro"><code>micro</code></a>
root directory has a relatively simple structure. However, since it is located
inside of the extensive TensorFlow repository, we have created scripts and
pre-generated project files that provide the relevant source files in isolation
within various embedded development environments.</p>
<h3>Key files</h3>
<p>The most important files for using the TensorFlow Lite for Microcontrollers
interpreter are located in the root of the project, accompanied by tests:</p>
<p><code>[`micro_mutable_op_resolver.h`](https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/micro_mutable_op_resolver.h)
can be used to provide the operations used by the interpreter to run the
model.</code></p>
<ul>
<li><a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"><code>micro_error_reporter.h</code></a>
    outputs debug information.</li>
<li><a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/micro_interpreter.h"><code>micro_interpreter.h</code></a>
    contains code to handle and run models.</li>
</ul>
<p>See <a href="get_started_low_level.md">Get started with microcontrollers</a> for a
walkthrough of typical usage.</p>
<p>The build system provides for platform-specific implementations of certain
files. These are located in a directory with the platform name, for example
<a href="https://github.com/tensorflow/tflite-micro/tree/main/tensorflow/lite/micro/cortex_m_generic"><code>cortex-m</code></a>.</p>
<p>Several other directories exist, including:</p>
<ul>
<li><a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/kernels"><code>kernel</code></a>,
    which contains operation implementations and the associated code.</li>
<li><a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/tools"><code>tools</code></a>,
    which contains build tools and their output.</li>
<li><a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/examples"><code>examples</code></a>,
    which contains sample code.</li>
</ul>
<h2>Start a new project</h2>
<p>We recommend using the <em>Hello World</em> example as a template for new projects. You
can obtain a version of it for your platform of choice by following the
instructions in this section.</p>
<h3>Use the Arduino library</h3>
<p>If you are using Arduino, the <em>Hello World</em> example is included in the
<code>Arduino_TensorFlowLite</code> Arduino library, which you can manually install in the
Arduino IDE and in <a href="https://create.arduino.cc/">Arduino Create</a>.</p>
<p>Once the library has been added, go to <code>File -&gt; Examples</code>. You should see an
example near the bottom of the list named <code>TensorFlowLite:hello_world</code>. Select
it and click <code>hello_world</code> to load the example. You can then save a copy of the
example and use it as the basis of your own project.</p>
<h3>Generate projects for other platforms</h3>
<p>TensorFlow Lite for Microcontrollers is able to generate standalone projects
that contain all of the necessary source files, using a <code>Makefile</code>. The current
supported environments are Keil, Make, and Mbed.</p>
<p>To generate these projects with Make, clone the
<a href="https://github.com/tensorflow/tflite-micro">TensorFlow/tflite-micro repository</a>
and run the following command:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile generate_projects</code></p>
<p>This will take a few minutes, since it has to download some large toolchains for
the dependencies. Once it has finished, you should see some folders created
inside a path like <code>gen/linux_x86_64/prj/</code> (the
exact path depends on your host operating system). These folders contain the
generated project and source files.</p>
<p>After running the command, you'll be able to find the <em>Hello World</em> projects in
<code>gen/linux_x86_64/prj/hello_world</code>. For
example, <code>hello_world/keil</code> will contain the Keil project.</p>
<h2>Run the tests</h2>
<p>To build the library and run all of its unit tests, use the following command:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile test</code></p>
<p>To run an individual test, use the following command, replacing <code>&lt;test_name&gt;</code>
with the name of the test:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile test_&lt;test_name&gt;</code></p>
<p>You can find the test names in the project's Makefiles. For example,
<code>examples/hello_world/Makefile.inc</code> specifies the test names for the <em>Hello
World</em> example.</p>
<h2>Build binaries</h2>
<p>To build a runnable binary for a given project (such as an example application),
use the following command, replacing <code>&lt;project_name&gt;</code> with the project you wish
to build:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile &lt;project_name&gt;_bin</code></p>
<p>For example, the following command will build a binary for the <em>Hello World</em>
application:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile hello_world_bin</code></p>
<p>By default, the project will be compiled for the host operating system. To
specify a different target architecture, use <code>TARGET=</code> and <code>TARGET_ARCH=</code>. The
following example shows how to build the <em>Hello World</em> example for a generic
cortex-m0:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile TARGET=cortex_m_generic TARGET_ARCH=cortex-m0 hello_world_bin</code></p>
<p>When a target is specified, any available target-specific source files will be
used in place of the original code. For example, the subdirectory
<code>examples/hello_world/cortex_m_generic</code> contains SparkFun Edge implementations
of the files <code>constants.cc</code> and <code>output_handler.cc</code>, which will be used when the
target <code>cortex_m_generic</code> is specified.</p>
<p>You can find the project names in the project's Makefiles. For example,
<code>examples/hello_world/Makefile.inc</code> specifies the binary names for the <em>Hello
World</em> example.</p>
<h2>Optimized kernels</h2>
<p>The reference kernels in the root of <code>tensorflow/lite/micro/kernels</code> are
implemented in pure C/C++, and do not include platform-specific hardware
optimizations.</p>
<p>Optimized versions of kernels are provided in subdirectories. For example,
<code>kernels/cmsis-nn</code> contains several optimized kernels that make use of Arm's
CMSIS-NN library.</p>
<p>To generate projects using optimized kernels, use the following command,
replacing <code>&lt;subdirectory_name&gt;</code> with the name of the subdirectory containing the
optimizations:</p>
<p><code>bash
make -f tensorflow/lite/micro/tools/make/Makefile TAGS=&lt;subdirectory_name&gt; generate_projects</code></p>
<p>You can add your own optimizations by creating a new subfolder for them. We
encourage pull requests for new optimized implementations.</p>
<h2>Generate the Arduino library</h2>
<p>If you need to generate a new build of the library, you can run the following
script from the TensorFlow repository:</p>
<p><code>bash
./tensorflow/lite/micro/tools/ci_build/test_arduino.sh</code></p>
<p>The resulting library can be found in
<code>gen/arduino_x86_64/prj/tensorflow_lite.zip</code>.</p>
<h2>Port to new devices</h2>
<p>Guidance on porting TensorFlow Lite for Microcontrollers to new platforms and
devices can be found in
<a href="https://github.com/tensorflow/tflite-micro/blob/main/tensorflow/lite/micro/docs/new_platform_support.md"><code>micro/docs/new_platform_support.md</code></a>.</p>