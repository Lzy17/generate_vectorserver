<h1>Developing a new backend for XLA</h1>
<p>This preliminary guide is for early adopters that want to easily retarget
TensorFlow to their hardware in an efficient manner. The guide is not
step-by-step and assumes knowledge of <a href="http://llvm.org">LLVM</a>,
<a href="https://bazel.build/">Bazel</a>, and TensorFlow.</p>
<p>XLA provides an abstract interface that a new architecture or accelerator can
implement to create a backend to run TensorFlow graphs. Retargeting XLA should
be significantly simpler and scalable than implementing every existing
TensorFlow Op for new hardware.</p>
<p>Most implementations will fall into one of the following scenarios:</p>
<ol>
<li>Existing CPU architecture not yet officially supported by XLA, with or
    without an existing <a href="http://llvm.org">LLVM</a> backend.</li>
<li>Non-CPU-like hardware with an existing LLVM backend.</li>
<li>Non-CPU-like hardware without an existing LLVM backend.</li>
</ol>
<blockquote>
<p>Note: An LLVM backend can mean either one of the officially released LLVM
backends or a custom LLVM backend developed in-house.</p>
</blockquote>
<h2>Scenario 1: Existing CPU architecture not yet officially supported by XLA</h2>
<p>In this scenario, start by looking at the existing
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/cpu/">XLA CPU backend</a>.
XLA makes it easy to retarget TensorFlow to different CPUs by using LLVM, since
the main difference between XLA backends for CPUs is the code generated by LLVM.
Google tests XLA for x64 and ARM64 architectures.</p>
<p>If the hardware vendor has an LLVM backend for their hardware, it is simple to
link the backend with the LLVM built with XLA. In JIT mode, the XLA CPU backend
emits code for the host CPU. For ahead-of-time compilation,
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/compiler.h"><code>xla::AotCompilationOptions</code></a>
can provide an LLVM triple to configure the target architecture.</p>
<p>If there is no existing LLVM backend but another kind of code generator exists,
it should be possible to reuse most of the existing CPU backend.</p>
<h2>Scenario 2: Non-CPU-like hardware with an existing LLVM backend</h2>
<p>It is possible to model a new
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/compiler.h"><code>xla::Compiler</code></a>
implementation on the existing
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/cpu/cpu_compiler.cc"><code>xla::CPUCompiler</code></a>
and <a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc"><code>xla::GPUCompiler</code></a>
classes, since these already emit LLVM IR. Depending on the nature of the
hardware, it is possible that many of the LLVM IR generation aspects will have
to be changed, but a lot of code can be shared with the existing backends.</p>
<p>A good example to follow is the
<a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/gpu/">GPU backend</a>
of XLA. The GPU backend targets a non-CPU-like ISA, and therefore some aspects
of its code generation are unique to the GPU domain. Other kinds of hardware,
e.g. DSPs like Hexagon (which has an upstream LLVM backend), can reuse parts of
the LLVM IR emission logic, but other parts will be unique.</p>
<h2>Scenario 3: Non-CPU-like hardware without an existing LLVM backend</h2>
<p>If it is not possible to utilize LLVM, then the best option is to implement a
new backend for XLA for the desired hardware. This option requires the most
effort. The classes that need to be implemented are as follows:</p>
<ul>
<li><a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/stream_executor/stream_executor.h"><code>StreamExecutor</code></a>:
    For many devices not all methods of <code>StreamExecutor</code> are needed. See
    existing <code>StreamExecutor</code> implementations for details.</li>
<li><a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/compiler.h"><code>xla::Compiler</code></a>:
    This class encapsulates the compilation of an HLO computation into an
    <code>xla::Executable</code>.</li>
<li><a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/executable.h"><code>xla::Executable</code></a>:
    This class is used to launch a compiled computation on the platform.</li>
<li><a href="https://www.tensorflow.org/code/tensorflow/compiler/xla/service/transfer_manager.h"><code>xla::TransferManager</code></a>:
    This class enables backends to provide platform-specific mechanisms for
    constructing XLA literal data from given device memory handles. In other
    words, it helps encapsulate the transfer of data from the host to the device
    and back.</li>
</ul>