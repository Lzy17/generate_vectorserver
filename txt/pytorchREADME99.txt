<h1>PyTorch JIT</h1>
<p>This folder contains (most of) the C++ code for the PyTorch JIT, a language
and compiler stack for executing PyTorch models portably and efficiently. To
learn more about the JIT from a user perspective, please consult our
<a href="https://pytorch.org/docs/stable/jit.html">reference documentation</a> and
<a href="https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html">tutorials</a>.</p>
<p>A brief summary of the source tree:
- <a href="OVERVIEW.md">OVERVIEW.md</a>: High-level technical overview of the JIT.
- <a href="frontend">frontend/</a>: Taking PyTorch modules in Python and translating them into the
  JIT IR.
- <a href="ir">ir/</a>: Core IR abstractions.
- <a href="runtime">runtime/</a>: Interpreter, graph execution, and JIT operators.
- <a href="codegen">codegen/</a>: Generating efficient, hardware-specific code for JIT subgraphs.
- <a href="serialization">serialization/</a>: Saving and loading modules.
- <a href="api">api/</a>: Any user-facing C++ or Python interfaces.
- <a href="python">python/</a>: Binding stuff into Python or accessing information from the Python
  environment.
- <a href="testing">testing/</a>: Utilities and helpers for testing.
- <a href="mobile">mobile/</a>: Mobile-specific implementations of runtime components.
- <a href="passes">passes/</a>: IR-to-IR passes, generally for optimization and lowering.
- <a href="generated">generated/</a>: This folder is generated by the PyTorch build, and contains
  bindings for native PyTorch operators into the JIT.</p>
<p><strong>Refer</strong> to each folder for more in-depth documentation.</p>
<p>Other relevant parts of the codebase not contained here:
- <a href="/aten/src/ATen/core">aten/src/ATen/core</a>: contains JIT code re-used by other elements of the
  runtime system (eager, mobile, etc.)</p>