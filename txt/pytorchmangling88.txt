<h1>Import mangling in <code>torch.package</code></h1>
<h2>Mangling rules</h2>
<p>These are the core invariants; if you are changing mangling code please preserve them.</p>
<ol>
<li>For every module imported by <code>PackageImporter</code>, two attributes are mangled:<ul>
<li><code>__module__</code></li>
<li><code>__file__</code></li>
</ul>
</li>
<li>Any <code>__module__</code> and <code>__file__</code> attribute accessed inside
   <code>Package{Ex|Im}porter</code> should be demangled immediately.</li>
<li>No mangled names should be serialized by <code>PackageExporter</code>.</li>
</ol>
<h2>Why do we mangle imported names?</h2>
<p>To avoid accidental name collisions with modules in <code>sys.modules</code>. Consider the following:</p>
<pre><code>from torchvision.models import resnet18
local_resnet18 = resnet18()

# a loaded resnet18, potentially with a different implementation than the local one!
i = torch.PackageImporter('my_resnet_18.pt')
loaded_resnet18 = i.load_pickle('model', 'model.pkl')

print(type(local_resnet18).__module__)  # 'torchvision.models.resnet18'
print(type(loaded_resnet18).__module__)  # ALSO 'torchvision.models.resnet18'
</code></pre>
<p>These two model types have the same originating <code>__module__</code> name set.
While this isn't facially incorrect, there are a number of places in
<code>cpython</code> and elsewhere that assume you can take any module name, look it
up <code>sys.modules</code>, and get the right module back, including:
- <a href="https://github.com/python/cpython/blob/5977a7989d49c3e095c7659a58267d87a17b12b1/Python/ceval.c#L5500"><code>import_from</code></a>
- <code>inspect</code>: used in TorchScript to retrieve source code to compile
- â€¦probably more that we don't know about.</p>
<p>In these cases, we may silently pick up the wrong module for <code>loaded_resnet18</code>
and e.g. TorchScript the wrong source code for our model.</p>
<h2>How names are mangled</h2>
<p>On import, all modules produced by a given <code>PackageImporter</code> are given a
new top-level module as their parent. This is called the <code>mangle parent</code>. For example:</p>
<pre><code>torchvision.models.resnet18
</code></pre>
<p>becomes</p>
<pre><code>&lt;torch_package_0&gt;.torchvision.models.resnet18
</code></pre>
<p>The mangle parent is made unique to a given <code>PackageImporter</code> instance by
bumping a process-global <code>mangle_index</code>, i.e. <code>&lt;torch__package{mangle_index}&gt;</code>.</p>
<p>The mangle parent intentionally uses angle brackets (<code>&lt;</code> and <code>&gt;</code>) to make it
very unlikely that mangled names will collide with any "real" user module.</p>
<p>An imported module's <code>__file__</code> attribute is mangled in the same way, so:</p>
<pre><code>torchvision/modules/resnet18.py
</code></pre>
<p>becomes</p>
<pre><code>&lt;torch_package_0&gt;.torchvision/modules/resnet18.py
</code></pre>
<p>Similarly, the use of angle brackets makes it very unlikely that such a name
will exist in the user's file system.</p>
<h2>Don't serialize mangled names</h2>
<p>Mangling happens <code>on import</code>, and the results are never saved into a package.
Assigning mangle parents on import means that we can enforce that mangle
parents are unique within the environment doing the importing.</p>
<p>It also allows us to avoid serializing (and maintaining backward
compatibility for) this detail.</p>