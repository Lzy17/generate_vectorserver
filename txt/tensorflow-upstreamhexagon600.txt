<h1>TensorFlow Lite Hexagon delegate</h1>
<p>This document explains how to use the TensorFlow Lite Hexagon Delegate in your
application using the Java and/or C API. The delegate leverages the Qualcomm
Hexagon library to execute quantized kernels on the DSP. Note that the delegate
is intended to <em>complement</em> NNAPI functionality, particularly for devices where
NNAPI DSP acceleration is unavailable (e.g., on older devices, or devices that
don’t yet have a DSP NNAPI driver).</p>
<p>Note: This delegate is in experimental (beta) phase.</p>
<p><strong>Supported devices:</strong></p>
<p>Currently the following Hexagon architecture are supported, including but not
limited to:</p>
<ul>
<li>Hexagon 680<ul>
<li>SoC examples: Snapdragon 821, 820, 660</li>
</ul>
</li>
<li>Hexagon 682<ul>
<li>SoC examples: Snapdragon 835</li>
</ul>
</li>
<li>Hexagon 685<ul>
<li>SoC examples: Snapdragon 845, Snapdragon 710, QCS410, QCS610, QCS605,
    QCS603</li>
</ul>
</li>
<li>Hexagon 690<ul>
<li>SoC examples: Snapdragon 855, RB5</li>
</ul>
</li>
</ul>
<p><strong>Supported models:</strong></p>
<p>The Hexagon delegate supports all models that conform to our
<a href="https://www.tensorflow.org/lite/performance/quantization_spec">8-bit symmetric quantization spec</a>,
including those generated using
<a href="https://www.tensorflow.org/lite/performance/post_training_integer_quant">post-training integer quantization</a>.
UInt8 models trained with the legacy
<a href="https://github.com/tensorflow/tensorflow/tree/r1.13/tensorflow/contrib/quantize">quantization-aware training</a>
path are also supported, for e.g.,
<a href="https://www.tensorflow.org/lite/guide/hosted_models#quantized_models">these quantized versions</a>
on our Hosted Models page.</p>
<h2>Hexagon delegate Java API</h2>
<p>```java
public class HexagonDelegate implements Delegate, Closeable {</p>
<p>/<em>
   * Creates a new HexagonDelegate object given the current 'context'.
   * Throws UnsupportedOperationException if Hexagon DSP delegation is not
   * available on this device.
   </em>/
  public HexagonDelegate(Context context) throws UnsupportedOperationException</p>
<p>/*<em>
   * Frees TFLite resources in C runtime.
   *
   * User is expected to call this method explicitly.
   </em>/
  @Override
  public void close();
}
```</p>
<h3>Example usage</h3>
<h4>Step 1. Edit app/build.gradle to use the nightly Hexagon delegate AAR</h4>
<p><code>dependencies {
  ...
  implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly-SNAPSHOT'
  implementation 'org.tensorflow:tensorflow-lite-hexagon:0.0.0-nightly-SNAPSHOT'
}</code></p>
<h4>Step 2. Add Hexagon libraries to your Android app</h4>
<ul>
<li>Download and run hexagon_nn_skel.run. It should provide 3 different shared
    libraries “libhexagon_nn_skel.so”, “libhexagon_nn_skel_v65.so”,
    “libhexagon_nn_skel_v66.so”<ul>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_1_10_3_1.run">v1.10.3</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.14.run">v1.14</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.17.0.0.run">v1.17</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.20.0.0.run">v1.20</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.20.0.1.run">v1.20.0.1</a></li>
</ul>
</li>
</ul>
<p>Note: You will need to accept the license agreement.</p>
<p>Note: As of 02/23/2021 you should use v1.20.0.1.</p>
<p>Note: You must use the hexagon_nn libraries with the compatible version of
interface library. Interface library is part of the AAR and fetched by bazel
through the
<a href="https://github.com/tensorflow/tensorflow/blob/master/third_party/hexagon/workspace.bzl">config</a>
The version in the bazel config is the version you should use.</p>
<ul>
<li>Include all 3 in your app with other shared libraries. See
    <a href="#how-to-add-shared-library-to-your-app">How to add shared library to your app</a>.
    The delegate will automatically pick the one with best performance depending
    on the device.</li>
</ul>
<p>Note: If your app will be built for both 32 and 64-bit ARM devices, then you
will need to add the Hexagon shared libs to both 32 and 64-bit lib folders.</p>
<h4>Step 3. Create a delegate and initialize a TensorFlow Lite Interpreter</h4>
<p>```java
import org.tensorflow.lite.HexagonDelegate;</p>
<p>// Create the Delegate instance.
try {
  hexagonDelegate = new HexagonDelegate(activity);
  tfliteOptions.addDelegate(hexagonDelegate);
} catch (UnsupportedOperationException e) {
  // Hexagon delegate is not supported on this device.
}</p>
<p>tfliteInterpreter = new Interpreter(tfliteModel, tfliteOptions);</p>
<p>// Dispose after finished with inference.
tfliteInterpreter.close();
if (hexagonDelegate != null) {
  hexagonDelegate.close();
}
```</p>
<h2>Hexagon delegate C API</h2>
<p>```c
struct TfLiteHexagonDelegateOptions {
  // This corresponds to the debug level in the Hexagon SDK. 0 (default)
  // means no debug.
  int debug_level;
  // This corresponds to powersave_level in the Hexagon SDK.
  // where 0 (default) means high performance which means more power
  // consumption.
  int powersave_level;
  // If set to true, performance information about the graph will be dumped
  // to Standard output, this includes cpu cycles.
  // WARNING: Experimental and subject to change anytime.
  bool print_graph_profile;
  // If set to true, graph structure will be dumped to Standard output.
  // This is usually beneficial to see what actual nodes executed on
  // the DSP. Combining with 'debug_level' more information will be printed.
  // WARNING: Experimental and subject to change anytime.
  bool print_graph_debug;
};</p>
<p>// Return a delegate that uses Hexagon SDK for ops execution.
// Must outlive the interpreter.
TfLiteDelegate<em>
TfLiteHexagonDelegateCreate(const TfLiteHexagonDelegateOptions</em> options);</p>
<p>// Do any needed cleanup and delete 'delegate'.
void TfLiteHexagonDelegateDelete(TfLiteDelegate* delegate);</p>
<p>// Initializes the DSP connection.
// This should be called before doing any usage of the delegate.
// "lib_directory_path": Path to the directory which holds the
// shared libraries for the Hexagon NN libraries on the device.
void TfLiteHexagonInitWithPath(const char* lib_directory_path);</p>
<p>// Same as above method but doesn't accept the path params.
// Assumes the environment setup is already done. Only initialize Hexagon.
Void TfLiteHexagonInit();</p>
<p>// Clean up and switch off the DSP connection.
// This should be called after all processing is done and delegate is deleted.
Void TfLiteHexagonTearDown();
```</p>
<h3>Example usage</h3>
<h4>Step 1. Edit app/build.gradle to use the nightly Hexagon delegate AAR</h4>
<p><code>dependencies {
  ...
  implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly-SNAPSHOT'
  implementation 'org.tensorflow:tensorflow-lite-hexagon:0.0.0-nightly-SNAPSHOT'
}</code></p>
<h4>Step 2. Add Hexagon libraries to your Android app</h4>
<ul>
<li>Download and run hexagon_nn_skel.run. It should provide 3 different shared
    libraries “libhexagon_nn_skel.so”, “libhexagon_nn_skel_v65.so”,
    “libhexagon_nn_skel_v66.so”<ul>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_1_10_3_1.run">v1.10.3</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.14.run">v1.14</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.17.0.0.run">v1.17</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.20.0.0.run">v1.20</a></li>
<li><a href="https://storage.cloud.google.com/download.tensorflow.org/tflite/hexagon_nn_skel_v1.20.0.1.run">v1.20.0.1</a></li>
</ul>
</li>
</ul>
<p>Note: You will need to accept the license agreement.</p>
<p>Note: As of 02/23/2021 you should use v1.20.0.1.</p>
<p>Note: You must use the hexagon_nn libraries with the compatible version of
interface library. Interface library is part of the AAR and fetched by bazel
through the
<a href="https://github.com/tensorflow/tensorflow/blob/master/third_party/hexagon/workspace.bzl">config</a>.
The version in the bazel config is the version you should use.</p>
<ul>
<li>Include all 3 in your app with other shared libraries. See
    <a href="#how-to-add-shared-library-to-your-app">How to add shared library to your app</a>.
    The delegate will automatically pick the one with best performance depending
    on the device.</li>
</ul>
<p>Note: If your app will be built for both 32 and 64-bit ARM devices, then you
will need to add the Hexagon shared libs to both 32 and 64-bit lib folders.</p>
<h4>Step 3. Include the C header</h4>
<ul>
<li>The header file "hexagon_delegate.h" can be downloaded from
    <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/hexagon/hexagon_delegate.h">GitHub</a>
    or extracted from the Hexagon delegate AAR.</li>
</ul>
<h4>Step 4. Create a delegate and initialize a TensorFlow Lite Interpreter</h4>
<ul>
<li>
<p>In your code, ensure the native Hexagon library is loaded. This can be done
    by calling <code>System.loadLibrary("tensorflowlite_hexagon_jni");</code> \
    in your Activity or Java entry-point.</p>
</li>
<li>
<p>Create a delegate, example:</p>
</li>
</ul>
<p>```c</p>
<h1>include "tensorflow/lite/delegates/hexagon/hexagon_delegate.h"</h1>
<p>// Assuming shared libraries are under "/data/local/tmp/"
// If files are packaged with native lib in android App then it
// will typically be equivalent to the path provided by
// "getContext().getApplicationInfo().nativeLibraryDir"
const char[] library_directory_path = "/data/local/tmp/";
TfLiteHexagonInitWithPath(library_directory_path);  // Needed once at startup.
::tflite::TfLiteHexagonDelegateOptions params = {0};
// 'delegate_ptr' Need to outlive the interpreter. For example,
// If use case will need to resize input or anything that can trigger
// re-applying delegates then 'delegate_ptr' need to outlive the interpreter.
auto* delegate_ptr = ::tflite::TfLiteHexagonDelegateCreate(&amp;params);
Interpreter::TfLiteDelegatePtr delegate(delegate_ptr,
  <a href="TfLiteDelegate* delegate"></a> {
    ::tflite::TfLiteHexagonDelegateDelete(delegate);
  });
interpreter-&gt;ModifyGraphWithDelegate(delegate.get());
// After usage of delegate.
TfLiteHexagonTearDown();  // Needed once at end of app/DSP usage.
```</p>
<h2>Add the shared library to your app</h2>
<ul>
<li>Create folder “app/src/main/jniLibs”, and create a directory for each target
    architecture. For example,<ul>
<li>ARM 64-bit: <code>app/src/main/jniLibs/arm64-v8a</code></li>
<li>ARM 32-bit: <code>app/src/main/jniLibs/armeabi-v7a</code></li>
</ul>
</li>
<li>Put your .so in the directory that match the architecture.</li>
</ul>
<p>Note: If you're using App Bundle for publishing your Application, you might want
to set android.bundle.enableUncompressedNativeLibs=false in the
gradle.properties file.</p>
<h2>Feedback</h2>
<p>For issues, please create a
<a href="https://github.com/tensorflow/tensorflow/issues/new?template=50-other-issues.md">GitHub</a>
issue with all the necessary repro details, including the phone model and board
used (<code>adb shell getprop ro.product.device</code> and <code>adb shell getprop
ro.board.platform</code>).</p>
<h2>FAQ</h2>
<ul>
<li>Which ops are supported by the delegate?<ul>
<li>See the current list of
    <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/hexagon/README.md">supported ops and constraints</a></li>
</ul>
</li>
<li>How can I tell that the model is using the DSP when I enable the delegate?<ul>
<li>Two log messages will be printed when you enable the delegate - one to
    indicate if the delegate was created and another to indicate how many
    nodes are running using the delegate. \
    <code>Created TensorFlow Lite delegate for Hexagon.</code> \
    <code>Hexagon delegate: X nodes delegated out of Y nodes.</code></li>
</ul>
</li>
<li>Do I need all Ops in the model to be supported to run the delegate?<ul>
<li>No, the Model will be partitioned into subgraphs based on the supported
    ops. Any unsupported ops will run on the CPU.</li>
</ul>
</li>
<li>How can I build the Hexagon delegate AAR from source?<ul>
<li>Use <code>bazel build -c opt --config=android_arm64
    tensorflow/lite/delegates/hexagon/java:tensorflow-lite-hexagon</code>.</li>
</ul>
</li>
<li>Why does Hexagon delegate fail to initialize although my Android device has
    a supported SoC?<ul>
<li>Verify if your device indeed has a supported SoC. Run <code>adb shell cat
    /proc/cpuinfo | grep Hardware</code> and see if it returns something like
    "Hardware : Qualcomm Technologies, Inc MSMXXXX".</li>
<li>Some phone manufacturers use different SoCs for the same phone model.
    Therefore, Hexagon delegate may only work on some but not all devices of
    the same phone model.</li>
<li>Some phone manufactures intentionally restrict the use of Hexagon DSP
    from non-system Android apps, making the Hexagon delegate unable to
    work.</li>
</ul>
</li>
<li>My phone has locked DSP access. I rooted the phone and still can't run the
    delegate, what to do ?<ul>
<li>Make sure to disable SELinux enforce by running <code>adb shell setenforce 0</code></li>
</ul>
</li>
</ul>