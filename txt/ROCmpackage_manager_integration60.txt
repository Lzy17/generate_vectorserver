<h1>Package Manager Integration</h1>
<p>This section provides information about the required meta-packages for the
following AMD ROCm programming models:</p>
<ul>
<li>Heterogeneous-Computing Interface for Portability (HIP)</li>
<li>OpenCL™</li>
<li>OpenMP™</li>
</ul>
<h2>ROCm Package Naming Conventions</h2>
<p>A meta-package is a grouping of related packages and dependencies used to
support a specific use case.</p>
<p><strong>Example:</strong> Running HIP applications</p>
<p>All meta-packages exist in both versioned and non-versioned forms.</p>
<ul>
<li>Non-versioned packages – For a single-version installation of the ROCm stack</li>
<li>Versioned packages – For multi-version installations of the ROCm stack</li>
</ul>
<p>```{figure-md} package-naming</p>
<p><img src="/data/deploy/linux/image.002.png" alt=""></p>
<p>ROCm Release Package Naming
```</p>
<p>{numref}<code>package-naming</code> demonstrates the single and multi-version ROCm packages' naming
structure, including examples for various Linux distributions. See terms below:</p>
<p><em>Module</em> - It is the part of the package that represents the name of the ROCm
component.</p>
<p><strong>Example:</strong> The examples mentioned in the image represent the ROCm HIP module.</p>
<p><em>Module version</em> - It is the version of the library released in that package. It
should increase with a newer release.</p>
<p><em>Release version</em> - It shows the ROCm release version when the package was
released.</p>
<p><strong>Example:</strong> <code>50400</code> points to the ROCm 5.4.0 release.</p>
<p><em>Build id</em> - It represents the Jenkins build number for that release.</p>
<p><em>Arch</em> - It shows the architecture for which the package was created.</p>
<p><em>Distro</em> - It describes the distribution for which the package was created. It is
valid only for rpm packages.</p>
<p><strong>Example:</strong> <code>el8</code> represents RHEL 8.x packages.</p>
<h2>Components of ROCm Programming Models</h2>
<p>{numref}<code>meta-packages</code> demonstrates the high-level layered architecture of ROCm
programming models and their meta-packages. All meta-packages are a combination
of required packages and libraries.</p>
<p><strong>Example:</strong></p>
<ul>
<li><code>rocm-hip-runtime</code> is used to deploy on supported machines to execute HIP
  applications.</li>
<li><code>rocm-hip-sdk</code> contains runtime components to deploy and execute HIP
  applications.</li>
</ul>
<p>```{figure-md} meta-packages</p>
<p><img src="/data/deploy/linux/image.003.png" alt=""></p>
<p>ROCm Meta Packages
```</p>
<p><code>{note}
`rocm-llvm` is not a meta-package but a single package that installs the ROCm
clang compiler files.</code></p>
<p><code>{table} Meta-packages and Their Descriptions
:name: meta-package-desc
| **Meta-packages**          | **Description**                                                                                                                           |
|:---------------------------|-----------------------------------------------------------------------------------------------------------------------------------------:|
| `rocm-language-runtime`  | The ROCm runtime                                                                                                                 |
| `rocm-hip-runtime`       | Run HIP applications written for the AMD platform                                                     |
| `rocm-opencl-runtime`    | Run OpenCL-based applications on the AMD platform                                                           |
| `rocm-hip-runtime-devel` | Develop applications on HIP or port from CUDA                                                                   |
| `rocm-opencl-sdk`        | Develop applications in OpenCL for the AMD platform                                                         |
| `rocm-hip-libraries`     | HIP libraries optimized for the AMD platform                                                                                        |
| `rocm-hip-sdk`           | Develop or port HIP applications and libraries for the AMD platform                                        |
| `rocm-developer-tools`   | Debug and profile HIP applications                                                                    |
| `rocm-ml-sdk`            | Develop and run Machine Learning applications with optimized for AMD |
| `rocm-ml-libraries`      | Key Machine Learning libraries, specifically MIOpen                                                                 |
| `rocm-openmp-sdk`        | Develop OpenMP-based applications for the AMD platform                                                        |
| `rocm-openmp-runtime`    | Run OpenMP-based applications for the AMD platform                                                            |</code></p>
<h2>Packages in ROCm Programming Models</h2>
<p>This section discusses the available meta-packages and their packages. The
following image visualizes the meta-packages and their associated packages in a
ROCm programming model.</p>
<p>```{figure-md} assoc-packages</p>
<p><img src="/data/deploy/linux/image.004.png" alt=""></p>
<p>Associated Packages
```</p>
<ul>
<li>Meta-packages can include another meta-package.</li>
<li><code>rocm-core</code> package is common across all the meta-packages.</li>
<li>Meta-packages and associated packages are represented in the same color.</li>
</ul>
<p><code>{note}
{numref}`assoc-packages` is for informational purposes only, as the individual
packages in a meta-package are subject to change. Install meta-packages, and not
individual packages, to avoid conflicts.</code></p>