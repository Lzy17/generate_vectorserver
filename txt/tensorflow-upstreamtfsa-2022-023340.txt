<h2>TFSA-2022-023: Integer overflow in TFLite array creation</h2>
<h3>CVE Number</h3>
<p>CVE-2022-23558</p>
<h3>Impact</h3>
<p>An attacker can craft a TFLite model that would cause an integer overflow <a href="https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L53-L60">in <code>TfLiteIntArrayCreate</code></a>:</p>
<p><code>cc
TfLiteIntArray* TfLiteIntArrayCreate(int size) {
  int alloc_size = TfLiteIntArrayGetSizeInBytes(size);
  // ...
  TfLiteIntArray* ret = (TfLiteIntArray*)malloc(alloc_size);
  // ...
}</code></p>
<p>The <a href="https://github.com/tensorflow/tensorflow/blob/ca6f96b62ad84207fbec580404eaa7dd7403a550/tensorflow/lite/c/common.c#L24-L33"><code>TfLiteIntArrayGetSizeInBytes</code></a> returns an <code>int</code> instead of a <code>size_t</code>:</p>
<p>```cc
int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;</p>
<p>int computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;</p>
<h1>if defined(_MSC_VER)</h1>
<p>// Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);</p>
<h1>endif</h1>
<p>return computed_size;
}
```</p>
<p>An attacker can control model inputs such that <code>computed_size</code> overflows the size of <code>int</code> datatype.</p>
<h3>Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/a1e1511dde36b3f8aa27a6ec630838e7ea40e091">a1e1511dde36b3f8aa27a6ec630838e7ea40e091</a>.</p>
<p>The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.</p>
<h3>For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3>Attribution</h3>
<p>This vulnerability has been reported by Wang Xuan of Qihoo 360 AIVul Team.</p>